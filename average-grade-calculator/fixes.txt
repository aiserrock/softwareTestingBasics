1.
old:
private Double calculateAverage(List<Integer> list) {
        return new Double(list.stream().reduce(0, (acc, element) -> acc + element) / list.size());
    }

new:
private Double calculateAverage(List<Integer> list) {
        return new Double((double)(list.stream().reduce(0, (acc, element) -> acc + element))/list.size());
    }

2.
old:
public String recalculateAndStoreBestStudent(int month) {
        ImmutableMap<String, ImmutableList<Integer>> grades = dao.retrieveAllGrades(month);
        Map<String, Double> averages = grades.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey,
                        entry -> calculateAverage(entry.getValue())));
        Double maxGrade = averages.entrySet().stream()
                .max(Comparator.comparing(Map.Entry::getValue))
                .get().getValue();
        String result = averages.entrySet().stream()
                .filter(entry -> entry.getValue().equals(maxGrade))
                .map(Map.Entry::getKey).collect(Collectors.joining());
        return result;
    }


new:
public String recalculateAndStoreBestStudent(int month) {
        ImmutableMap<String, ImmutableList<Integer>> grades = dao.retrieveAllGrades(month);
        if(grades.isEmpty()) return null;
        Map<String, Double> averages = grades.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey,
                        entry -> calculateAverage(entry.getValue())));
        Double maxGrade = averages.entrySet().stream()
                .max(Comparator.comparing(Map.Entry::getValue))
                .get().getValue();
        String result = averages.entrySet().stream()
                .filter(entry -> entry.getValue().equals(maxGrade))
                .map(Map.Entry::getKey).collect(Collectors.joining(", "));
        dao.storeBestStudentName(result);
        return result;
    }